{"version":3,"sources":["../src/number-format-x.js"],"names":[],"mappings":"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","file":"number-format-x.esm.js","sourcesContent":["import toNumber from 'to-number-x';\nimport toInteger from 'to-integer-x';\nimport numberIsFinite from 'is-finite-x';\nimport numToString from 'number-to-decimal-form-string-x';\nimport toStr from 'to-string-x';\nimport mathClamp from 'math-clamp-x';\nimport isNil from 'is-nil-x';\n\nconst RE = /none/.constructor;\nconst {toFixed, toString: numberToString} = 0;\nconst {replace, split, slice: strSlice} = '';\nconst {join} = [];\n\nconst isArgSupplied = function isArgSupplied(args, index) {\n  return args.length > index && isNil(args[index]) === false;\n};\n\nconst getOpts = function getOpts(args) {\n  return {\n    sectionLength: isArgSupplied(args, 2) ? toInteger(args[2]) : 3,\n    /* Formats a number (string) of fixed-point notation, with user delimeters. */\n    sectionDelimiter: isArgSupplied(args, 3) ? toStr(args[3]) : ',',\n    decimalDelimiter: isArgSupplied(args, 4) ? toStr(args[4]) : '.',\n  };\n};\n\nconst getFixed = function getFixed(number, digits) {\n  const fixed = numToString(toFixed.call(number, digits));\n\n  if (digits > 0) {\n    const parts = split.call(fixed, '.');\n    parts[1] = strSlice.call(`${parts[1] || ''}00000000000000000000`, 0, digits);\n\n    return join.call(parts, '.');\n  }\n\n  return fixed;\n};\n\nconst getFixedReplaced = function getFixedReplaced(fixed, decimalDelimiter) {\n  if (decimalDelimiter === '.') {\n    return fixed;\n  }\n\n  return replace.call(fixed, '.', decimalDelimiter);\n};\n\nconst getRegex = function getRegex(digits, sectionLength) {\n  return new RE(`\\\\d(?=(\\\\d{${sectionLength}})+${digits > 0 ? '\\\\D' : '$'})`, 'g');\n};\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * Format a given number using fixed-point notation, with user specified digit\n * counts and seperators. `null` or 'undefined' can be used for optional\n * arguments to denote that the default value is to be used.\n *\n * @param {number} value - The numerical value to be formatted.\n * @param {number} [digits=2] - The number of digits to appear after the\n *  decimal point; this may be a value between 0 and 20, inclusive.\n * @param {number} [sectionLength=3] - Length of integer part sections.\n * @param {string} [sectionDelimiter=,] - Integer part section delimiter.\n * @param {string} [decimalDelimiter=.] - Decimal delimiter.\n * @returns {string} The numerical value with the chosen formatting.\n */\n// eslint-enable jsdoc/check-param-names\nconst numberFormat = function numberFormat(value) {\n  const number = toNumber(value);\n\n  if (numberIsFinite(number) === false) {\n    return numberToString.call(number);\n  }\n\n  /* 'digits' must be >= 0 or <= 20 otherwise a RangeError is thrown by Number#toFixed. */\n  /* eslint-disable-next-line prefer-rest-params */\n  const digits = isArgSupplied(arguments, 1) ? mathClamp(toInteger(arguments[1]), 0, 20) : 2;\n  /* Formats a number using fixed-point notation. */\n  const fixed = getFixed(number, digits);\n  /* eslint-disable-next-line prefer-rest-params */\n  const {sectionLength, sectionDelimiter, decimalDelimiter} = getOpts(arguments);\n\n  return replace.call(getFixedReplaced(fixed, decimalDelimiter), getRegex(digits, sectionLength), `$&${sectionDelimiter}`);\n};\n\nexport default numberFormat;\n"]}