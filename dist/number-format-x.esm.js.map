{"version":3,"sources":["../src/number-format-x.js"],"names":[],"mappings":"AAAA,OAAO,QAAP,MAAqB,aAArB;AACA,OAAO,SAAP,MAAsB,cAAtB;AACA,OAAO,cAAP,MAA2B,aAA3B;AACA,OAAO,WAAP,MAAwB,iCAAxB;AACA,OAAO,KAAP,MAAkB,aAAlB;AACA,OAAO,SAAP,MAAsB,cAAtB;AACA,OAAO,KAAP,MAAkB,UAAlB;AAEA,IAAM,EAAE,GAAG,OAAO,WAAlB;QAC4C,C;IAArC,O,KAAA,O;IAAmB,c,KAAV,Q;WAC0B,E;IAAnC,O,QAAA,O;IAAS,K,QAAA,K;IAAc,Q,QAAP,K;IAChB,I,GAAQ,E,CAAR,I;;AAEP,IAAM,aAAa,GAAG,SAAS,cAAT,CAAwB,IAAxB,EAA8B,KAA9B,EAAqC;AACzD,SAAO,IAAI,CAAC,MAAL,GAAc,KAAd,IAAuB,KAAK,CAAC,IAAI,CAAC,KAAD,CAAL,CAAL,KAAuB,KAArD;AACD,CAFD,C,CAIA;AACA;;AACA;;;;;;;;;;;;;AAaA;;;AACA,IAAM,YAAY,GAAG,SAAS,YAAT,CAAsB,KAAtB,EAA6B;AAChD,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAD,CAAvB;;AAEA,MAAI,cAAc,CAAC,MAAD,CAAd,KAA2B,KAA/B,EAAsC;AACpC,WAAO,cAAc,CAAC,IAAf,CAAoB,MAApB,CAAP;AACD,GAL+C,CAOhD;;AACA;;;AACA,MAAM,MAAM,GAAG,aAAa,CAAC,SAAD,EAAY,CAAZ,CAAb,GAA8B,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,CAAD,CAAV,CAAV,EAA0B,CAA1B,EAA6B,EAA7B,CAAvC,GAA0E,CAAzF,CATgD,CAUhD;;AACA,MAAI,KAAK,GAAG,WAAW,CAAC,OAAO,CAAC,IAAR,CAAa,MAAb,EAAqB,MAArB,CAAD,CAAvB;;AAEA,MAAI,MAAM,GAAG,CAAb,EAAgB;AACd,QAAM,KAAK,GAAG,KAAK,CAAC,IAAN,CAAW,KAAX,EAAkB,GAAlB,CAAd;AACA,IAAA,KAAK,CAAC,CAAD,CAAL,GAAW,QAAQ,CAAC,IAAT,WAAiB,KAAK,CAAC,CAAD,CAAL,IAAY,EAA7B,2BAAuD,CAAvD,EAA0D,MAA1D,CAAX;AACA,IAAA,KAAK,GAAG,IAAI,CAAC,IAAL,CAAU,KAAV,EAAiB,GAAjB,CAAR;AACD;AAED;;;AACA,MAAM,aAAa,GAAG,aAAa,CAAC,SAAD,EAAY,CAAZ,CAAb,GAA8B,SAAS,CAAC,SAAS,CAAC,CAAD,CAAV,CAAvC,GAAwD,CAA9E,CApBgD,CAqBhD;;AACA;;AACA,MAAM,gBAAgB,GAAG,aAAa,CAAC,SAAD,EAAY,CAAZ,CAAb,GAA8B,KAAK,CAAC,SAAS,CAAC,CAAD,CAAV,CAAnC,GAAoD,GAA7E;AACA;;AACA,MAAM,gBAAgB,GAAG,aAAa,CAAC,SAAD,EAAY,CAAZ,CAAb,GAA8B,KAAK,CAAC,SAAS,CAAC,CAAD,CAAV,CAAnC,GAAoD,GAA7E;AAEA,SAAO,OAAO,CAAC,IAAR,CACL,gBAAgB,KAAK,GAArB,GAA2B,KAA3B,GAAmC,OAAO,CAAC,IAAR,CAAa,KAAb,EAAoB,GAApB,EAAyB,gBAAzB,CAD9B,EAEL,IAAI,EAAJ,sBAAqB,aAArB,gBAAwC,MAAM,GAAG,CAAT,GAAa,KAAb,GAAqB,GAA7D,QAAqE,GAArE,CAFK,cAGA,gBAHA,EAAP;AAKD,CAhCD;;AAkCA,eAAe,YAAf","file":"number-format-x.esm.js","sourcesContent":["import toNumber from 'to-number-x';\nimport toInteger from 'to-integer-x';\nimport numberIsFinite from 'is-finite-x';\nimport numToString from 'number-to-decimal-form-string-x';\nimport toStr from 'to-string-x';\nimport mathClamp from 'math-clamp-x';\nimport isNil from 'is-nil-x';\n\nconst RE = /none/.constructor;\nconst {toFixed, toString: numberToString} = 0;\nconst {replace, split, slice: strSlice} = '';\nconst {join} = [];\n\nconst isArgSupplied = function _isArgSupplied(args, index) {\n  return args.length > index && isNil(args[index]) === false;\n};\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * Format a given number using fixed-point notation, with user specified digit\n * counts and seperators. `null` or 'undefined' can be used for optional\n * arguments to denote that the default value is to be used.\n *\n * @param {number} value - The numerical value to be formatted.\n * @param {number} [digits=2] - The number of digits to appear after the\n *  decimal point; this may be a value between 0 and 20, inclusive.\n * @param {number} [sectionLength=3] - Length of integer part sections.\n * @param {string} [sectionDelimiter=,] - Integer part section delimiter.\n * @param {string} [decimalDelimiter=.] - Decimal delimiter.\n * @returns {string} The numerical value with the choosen formatting.\n */\n// eslint-enable jsdoc/check-param-names\nconst numberFormat = function numberFormat(value) {\n  const number = toNumber(value);\n\n  if (numberIsFinite(number) === false) {\n    return numberToString.call(number);\n  }\n\n  // 'digits' must be >= 0 or <= 20 otherwise a RangeError is thrown by Number#toFixed.\n  /* eslint-disable-next-line prefer-rest-params */\n  const digits = isArgSupplied(arguments, 1) ? mathClamp(toInteger(arguments[1]), 0, 20) : 2;\n  // Formats a number using fixed-point notation.\n  let fixed = numToString(toFixed.call(number, digits));\n\n  if (digits > 0) {\n    const parts = split.call(fixed, '.');\n    parts[1] = strSlice.call(`${parts[1] || ''}00000000000000000000`, 0, digits);\n    fixed = join.call(parts, '.');\n  }\n\n  /* eslint-disable-next-line prefer-rest-params */\n  const sectionLength = isArgSupplied(arguments, 2) ? toInteger(arguments[2]) : 3;\n  // Formats a number (string) of fixed-point notation, with user delimeters.\n  /* eslint-disable-next-line prefer-rest-params */\n  const sectionDelimiter = isArgSupplied(arguments, 3) ? toStr(arguments[3]) : ',';\n  /* eslint-disable-next-line prefer-rest-params */\n  const decimalDelimiter = isArgSupplied(arguments, 4) ? toStr(arguments[4]) : '.';\n\n  return replace.call(\n    decimalDelimiter === '.' ? fixed : replace.call(fixed, '.', decimalDelimiter),\n    new RE(`\\\\d(?=(\\\\d{${sectionLength}})+${digits > 0 ? '\\\\D' : '$'})`, 'g'),\n    `$&${sectionDelimiter}`,\n  );\n};\n\nexport default numberFormat;\n"]}